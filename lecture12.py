# -*- coding: utf-8 -*-
"""lecture12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r_3KCBepRKspU5f8vZ1mO6535bBrhoUd

#Lecture 12 Model Deployment
* Course: 2603647 Fundamental Programming for Datascience 2/64
* Stat CBS Chula by Suronapee Phoomvuthisarn, Ph.D.
"""

!pip install jupyter-dash

"""#Example"""

from jupyter_dash import JupyterDash # https://medium.com/plotly/introducing-jupyterdash-811f1f57c02e
from dash import dcc # for interactivity built with React.js
from dash import html # for all HTML tags

# initialize an application
app = JupyterDash(__name__)
app.layout = html.Div(children=[
   html.H1(children='Hello Dash'),
   html.Div(children='''Building Web Application Framework for Python.'''),
   dcc.Graph(
      id='my-graph',
      figure={
         'data': [
            {'x': ['hw', 'mid', 'final'], 'y': [26, 25, 32], 'type': 'bar', 'name': 'Student1'},
            {'x': ['hw', 'mid', 'final'], 'y': [20, 19, 35], 'type': 'bar', 'name': 'Student2'},
         ],
         'layout': {
            'title': 'Fundamental Programming for Data Science'
         }
      }
   ) 

])

# execute only if run as a script # https://www.geeksforgeeks.org/__name__-special-variable-python/
#if __name__ == '__main__':
#   app.run_server(debug=True)
app.run_server(debug=True)

app = JupyterDash(__name__)
colors = {
   'background': 'white',
   'text': 'blue'
}
app.layout = html.Div(style={'backgroundColor': colors['background']}, children=[
   html.H1(
      children='Hello Dash',
      #className="header-title",
      style={
         'textAlign': 'center',
         'color': colors['text']
      }
   ),
	
   html.Div(children='Building Web Application Framework for Python.', style={
      'textAlign': 'center',
      'color': colors['text']
   }),
	
   dcc.Graph(
      id='my-graph-2',

      figure={
         'data': [
            {'x': ['hw', 'mid', 'final'], 'y': [26, 25, 32], 'type': 'bar', 'name': 'Student1'},
            {'x': ['hw', 'mid', 'final'], 'y': [20, 19, 35], 'type': 'bar', 'name': 'Student2'},
         ],
         'layout': {
            'title': 'Fundamental Programming for Data Science',
            'plot_bgcolor': 'red',
            'paper_bgcolor': 'green',
            'font': {
               'color': colors['text']
            }
         }
      }
   )
])
app.run_server('inline',debug=True)

app.layout = html.Div([
   html.Label('Dropdown'),
   dcc.Dropdown(
      options=[
         {'label': 'New York City', 'value': 'NYC'},
         {'label': u'Montréal', 'value': 'MTL'},
         {'label': 'San Francisco', 'value': 'SF'}
      ],
      value='MTL'
   ),
	
   html.Label('Multi-Select Dropdown'),
   dcc.Dropdown(
      options=[
         {'label': 'New York City', 'value': 'NYC'},
         {'label': u'Montréal', 'value': 'MTL'},
         {'label': 'San Francisco', 'value': 'SF'}
      ],
      value=['MTL', 'SF'],
      multi=True
   ),
	
   html.Label('Radio Items'),
   dcc.RadioItems(
      options=[
         {'label': 'New York City', 'value': 'NYC'},
         {'label': u'Montréal', 'value': 'MTL'},
         {'label': 'San Francisco', 'value': 'SF'}
      ],
      value='MTL'
   ),
	
   html.Label('Checkboxes'),
   dcc.Checklist(
      options=[
         {'label': 'New York City', 'value': 'NYC'},
         {'label': u'Montréal', 'value': 'MTL'},
         {'label': 'San Francisco', 'value': 'SF'}
      ],
      value=['MTL', 'SF']
   ),

   html.Label('Text Input'),
   dcc.Input(value='MTL', type='text'),
	
   html.Label('Slider'),
   dcc.Slider(
      min=0,
      max=9,
      marks={i: 'Label {}'.format(i) if i == 1 else str(i) for i in range(1, 6)},
      value=5,
   ),
], style={'columnCount': 1})


app.run_server(debug=True)

"""#Exercise"""

#import dash
from jupyter_dash import JupyterDash
from dash import dcc 
from dash import html 
import plotly.graph_objs as go
import os
from dash.dependencies import Input, Output
from keras.models import load_model

"""##1 Create the histogram of diamond prices

"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd; import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
df = sns.load_dataset('diamonds')
df

# create the app instance
app = ### Fill your code ###

# create 2 main elements of the plotly 
# (1) create trace - a single plot can have many traces
trace = go.Histogram(
    # give data for the x-axis
    x = ### Fill your code ###
)

# (2) create layout
layout = go.Layout(
    title = 'Diamond Prices',
    xaxis = dict(title='Price'),
    yaxis = dict(title='Count')
)

# create a figure object 
figure = go.Figure(
    data = [trace], # data argument keeps the list of traces (in this case is one trace)
    layout = layout
)

# create layout of our Dash app
app.layout = html.Div(### Fill your code ###)

# Run app and display result inline in the notebook
app.### Fill your code ###

"""##2"""

diamonds = df.sample(2000)
diamonds

external_stylesheets = [
    'https://codepen.io/chriddyp/pen/bWLwgP.css',
    {
        'href': 'https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css',
        'rel': 'stylesheet',
        'integrity': 'sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO',
        'crossorigin': 'anonymous'
    }
]

app = JupyterDash(__name__,external_stylesheets=external_stylesheets)

numerical_features = ['price','carat','depth', 'table',  'x', 'y','z']
options_dropdown = [{'label':x.upper(), 'value':x} for x in numerical_features]

dd_x_var = dcc.Dropdown(id='x-var', options = options_dropdown, value='carat')
div_x_var = html.Div(children=[html.H4('Variable for xaxis:'), dd_x_var],
                     className='six columns')
dd_y_var = dcc.Dropdown(id='y-var', options = options_dropdown, value='price')
div_y_var = html.Div(children=[html.H4('Variable for yaxis:'), dd_y_var],
                     className='six columns')

app.layout = html.Div(children=[html.H1('Adding interactive controls'),
                                html.H2('Interactive scatter plot example'),
                                html.Div(children=[div_x_var, div_y_var],
                                         className='row'),
                                dcc.Graph(id='scatter')
                                ])

@app.callback(
    Output(component_id='### Fill your code ###', component_property='figure'),
    [Input(component_id='### Fill your code ###', component_property='value'),Input(component_id='### Fill your code ###', component_property='value')]
)

def scatter_plot(x_col, y_col):
  trace = go.Scatter(
      x = diamonds[x_col],
      y = diamonds[y_col],
      mode = 'markers'
  )
  layout = go.Layout(
      title = 'Scatter plot', 
      xaxis = dict(title = x_col.upper()),
      yaxis = dict(title = y_col.upper())
      )
  output_plot = go.Figure(
      data = [### Fill your code ###],
      layout = ### Fill your code ###
  )
  return ### Fill your code ###

app.run_server(mode='external')

"""##3 Serialized Objects """

from jupyter_dash import JupyterDash
import plotly.graph_objs as go
import os
from dash import dcc 
from dash import html
from dash.dependencies import Input, Output
from keras.models import load_model
from keras.models import Sequential
from keras.layers import Dense
import joblib

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd; import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
df = sns.load_dataset('diamonds')
df

y = df['price']
df.drop('price', axis=1, inplace=True)
df

df = pd.get_dummies(df, drop_first=True)
X = df.to_numpy()
y = y.to_numpy()
X.shape, y.shape

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import SGDRegressor

X = df.to_numpy()
X.shape, y.shape

scaler = StandardScaler()
X = scaler.fit_transform(X)
model = SGDRegressor(random_state=1)
model.fit(X, y)
print("Cost", np.sqrt(mean_squared_error(model.predict(X),y)))
print("R-squared", model.score(X,y))

# Scaler
joblib.dump(scaler, './Model/scaler.joblib')

# Trained Model
joblib.dump(model, './Model/model.pkl')